import random
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.impute import SimpleImputer

# Define as apostas disponíveis
bet_types = {
    "red": [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36],
    "black": [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35],
    "high": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
    "low": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
    "even": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36],
    "odd": [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35],
    "column1": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34],
    "column2": [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35],
    "column3": [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36],
    "dozen1": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    "dozen2": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    "dozen3": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36],
    "double_line_1": [1, 2, 3, 4, 5, 6],
    "double_line_2": [4, 5, 6, 7, 8, 9],
    "double_line_3": [7, 8, 9, 10, 11, 12],
    "double_line_4": [10, 11, 12, 13, 14, 15],
    "double_line_5": [13, 14, 15, 16, 17, 18],
    "double_line_6": [16, 17, 18, 19, 20, 21],
    "double_line_7": [19, 20, 21, 22, 23, 24],
    "double_line_8": [22, 23, 24, 25, 26, 27],
    "double_line_9": [25, 26, 27, 28, 29, 30],
    "double_line_10": [28, 29, 30, 31, 32, 33],
    "double_line_11": [31, 32, 33, 34, 35, 36],
    "square_0": [0, 1, 2, 3],
    "square_1": [1, 2, 4, 5],
    "square_2": [2, 3, 5, 6],
    "square_3": [4, 5, 7, 8],
    "square_4": [5, 6, 8, 9],
    "square_5": [7, 8, 10, 11],
    "square_6": [8, 9, 11, 12],
    "square_7": [10, 11, 13, 14],
    "square_8": [11, 12, 14, 15],
    "square_9": [13, 14, 16, 17],
    "square_10": [14, 15, 17, 18],
    "square_11": [16, 17, 19, 20],
    "square_12": [17, 18, 20, 21],
    "square_13": [19, 20 ,22, 23],
    "square_14": [20, 21, 23, 24],
    "square_15": [22, 23, 25, 26],
    "square_16": [23, 24, 26, 27],
    "square_17": [25, 26, 28, 29],
    "square_18": [26, 27, 29, 30],
    "square_19": [28, 29, 31, 32],
    "square_20": [29, 30, 32, 33],
    "square_21": [31, 32, 34, 35],
    "square_22": [32, 33, 35, 36],
    "line_1": [1, 2, 3],
    "line_2": [4, 5, 6],
    "line_3": [7, 8, 9],
    "line_4": [10, 11, 12],
    "line_5": [13, 14, 15],
    "line_6": [16, 17, 18],
    "line_7": [19, 20, 21],
    "line_8": [22, 23, 24],
    "line_9": [25, 26, 27],
    "line_10": [28, 29, 30],
    "line_11": [31, 32, 33],
    "line_12": [34, 35, 36],
    "split_0-1": [0, 1],
    "split_0-2": [0, 2],
    "split_0-3": [0, 3],
    "split_1-2": [1, 2],
    "split_1-4": [1, 4],
    "split_2-3": [2, 3],
    "split_2-5": [2, 5],
    "split_3-6": [3, 6],
    "split_4-5": [4, 5],
    "split_4-7": [4, 7],
    "split_5-6": [5, 6],
    "split_5-8": [5, 8],
    "split_6-9": [6, 9],
    "split_7-8": [7, 8],
    "split_7-10": [7, 10],
    "split_8-9": [8, 9],
    "split_8-11": [8, 11],
    "split_9-12": [9, 12],
    "split_13-14": [13, 14],
    "split_13-16": [13, 16],
    "split_14-15": [14, 15],
    "split_14-17": [14, 17],
    "split_15-18": [15, 18],
    "split_19-20": [19, 20],
    "split_19-22": [19, 22],
    "split_20-21": [20, 21],
    "split_20-23": [20, 23],
    "split_21-24": [21, 24],
    "split_25-26": [25, 26],
    "split_25-28": [25, 28],
    "split_26-27": [26, 27],
    "split_26-29": [26, 29],
    "split_27-30": [27, 30],
    "split_31-32": [31, 32],
    "split_31-34": [31, 34],
    "split_32-33": [32, 33],
    "split_32-35": [32, 35],
    "split_33-36": [33, 36],
    "full_0": [0],
    "full_1": [1],
    "full_2": [2],
    "full_3": [3],
    "full_4": [4],
    "full_5": [5],
    "full_6": [6],
    "full_7": [7],
    "full_8": [8],
    "full_9": [9],
    "full_10": [10],
    "full_11": [11],
    "full_12": [12],
    "full_13": [13],
    "full_14": [14],
    "full_15": [15],
    "full_16": [16],
    "full_17": [17],
    "full_18": [18],
    "full_19": [19],
    "full_20": [20],
    "full_21": [21],
    "full_22": [22],
    "full_23": [23],
    "full_24": [24],
    "full_25": [25],
    "full_26": [26],
    "full_27": [27],
    "full_28": [28],
    "full_29": [29],
    "full_30": [30],
    "full_31": [31],
    "full_32": [32],
    "full_33": [33],
    "full_34": [34],
    "full_35": [35],
    "full_36": [36]
}

class RouletteAI:
    def __init__(self, bank_balance):
        self.bet_types = {}
        self.bank_balance = bank_balance
        self.rounds = 0
        self.results = []
        self.bet_history = []

    def make_bet(self, bet_type, bet_amount):
        if self.bank_balance - bet_amount >= 0:
            self.bank_balance -= bet_amount
            self.bet_history.append((bet_type, bet_amount))
            return True
        else:
            return False

    def update_balance(self, result):
        for bet in self.bet_history:
            if result in self.bet_types[bet[0]]:
                self.bank_balance += bet[1] * 2
        self.results.append(result)
        self.rounds += 1

    def analyze_results(self):
        df = pd.DataFrame(self.results, columns=["result"])
        if self.rounds < 10:
            return None

        df_bet_types = pd.DataFrame(columns=self.bet_types)

        for bet_type, bet_value in self.bet_types.items():
            df_bet_type = pd.DataFrame(columns=[f"{bet_type}_count_{i}" for i in range(1, 8)])
            for i in range(1, 6):
                df_bet_type[f"{bet_type}_count_{i}"] = df[self.bet_type].apply(
                    lambda x: x[-i:] if len(x) >= i else [0] * (i - len(x))).apply(lambda x: sum(x)).astype(int)
            df_bet_types = pd.concat([df_bet_types, df_bet_type], axis=1)

        df = pd.concat([df, df_bet_types], axis=1)

        for i in range(1, self.rounds + 1):
            for bet_type in self.bet_types.keys():
                df[f"{bet_type}_count_{i}"] = df[self.bet_type].rolling(i).sum()

        imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
        X = pd.DataFrame(imputer.fit_transform(df.drop("result", axis=1)), columns=df.drop("result", axis=1).columns)
        y = df["result"]
        logreg = LogisticRegression()
        logreg.fit(X, y)

        bet_type = logreg.predict(X.iloc[-1, :].values.reshape(1, -1))[0]
        bet_amount = min(0.5, self.bank_balance / 2)

        return (bet_type, bet_amount)

    def play(self):
        if self.bank_balance <= 0.8 * self.bank_balance or self.bank_balance >= 1.1 * self.bank_balance:
            return False

        bet = self.analyze_results()
        if bet:
            bet_type, bet_amount = bet
            if self.make_bet(bet_type, bet_amount):
                print(
                    f"A IA está apostando em {bet_type} com o valor de {bet_amount}. Saldo atual da banca: {self.bank_balance}")
                return True
            else:
                print(
                    f"A IA não tem saldo suficiente para realizar a aposta. Saldo atual da banca: {self.bank_balance}")
                return False
        else:
            return False

def main():
    bank_balance = float(input("Informe o valor inicial da banca: "))
    ai = RouletteAI(bank_balance)
    profit = 1.1 * bank_balance
    loss = 0.8 * bank_balance

    while True:
        result = int(input("Informe o número sorteado: "))
        ai.update_balance(result)
        if not ai.play():
            print(f"A IA não vai apostar nesta rodada. Saldo atual da banca: {ai.bank_balance}")
        if ai.bank_balance <= loss or ai.bank_balance >= profit:
            break

    if ai.bank_balance <= loss:
        print("Você atingiu 20% de prejuízo. Encerrando o jogo.")
    elif ai.bank_balance >= profit:
        print("Você atingiu 10% de lucro. Encerrando o jogo.")

if __name__ == "__main__":
    main()
